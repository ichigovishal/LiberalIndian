# Generated by Django 2.2.1 on 2019-09-01 01:47

import account.usermanager
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomerUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('first_name', models.CharField(blank=True, max_length=30, null=True, verbose_name='first name')),
                ('middle_name', models.CharField(blank=True, max_length=30, null=True, verbose_name='middle name')),
                ('last_name', models.CharField(blank=True, max_length=150, null=True, verbose_name='last name')),
                ('email', models.EmailField(error_messages={'Register': 'A user with that Email already exists.'}, help_text='Required.', max_length=254, unique=True, verbose_name='email address')),
                ('dob', models.DateTimeField(blank=True, help_text='Date of birth', null=True, verbose_name='date of birth')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_admin', models.BooleanField(default=False, help_text='Designates whether this user should be treated as admin. ', verbose_name='admin')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates whether this user should be treated as super user. ', verbose_name='super user')),
                ('write_privilege', models.BooleanField(default=False, help_text='Designates whether this user has a write privilege. ', verbose_name='write privilege')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('profile', models.ImageField(default='account/profile/default.jpg', upload_to='account/profile/')),
                ('active_time', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
                ('energy_points', models.IntegerField(default=0)),
                ('last_check_discord_no', models.IntegerField(default=0)),
                ('last_check_article_no', models.IntegerField(default=0)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'email',
                'abstract': False,
                'swappable': 'AUTH_USER_MODEL',
            },
            managers=[
                ('objects', account.usermanager.CustomerUserManager()),
            ],
        ),
    ]
